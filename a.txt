https://github.com/hsegnam/Mypy.git

Python: Data Processing Language 
add.c
add.java
#include<stdio.h>
void main()
{
	int a,b,c;
	scanf("%d%d", &a,&b);
	printf("Addition = %d", (a+b));
}

12+13
a='12'---> integer
b=13
a+b


Language, data processing, functional progg, procedure oriented progg., OO Progg
DBMS----> Dat
DBMS, flat files, binary files, website, csv, 

Developer : Guido Van Rossum

as a thesis in 1985-1991
add.py
python 1.x 1994				C-lang Filename.c, filename.java-----> filename.py
python 2.x 2000
python 3.x 2008 -----> 3.6,3.7
upcoming 4x---- No updates yet

Where???--- 			JVM----> Just In Time compiler 
Python developement---> Problem solving domain---> Client req. solve python progg
web developement ----> Python----> Django Framework ---> Security---> SQL injection/cross site scripting 
data science ----> Data Analyst, Data Engineer, 6+ years----> ML 4-5 years---> AI 
IOT----> Internet of Things---> Smart devices---> alexa 
ML----> pandas, numpy, matplotlib -----> 50 pics dogs----> dog 90%+ 
AI


Dev tools-----> pycharm, VScode, Spyder, Atom, Sublime ----> Scripting tools FileName.py

ANACONDA

DA/ML/AI/NLP/CV -----> Jupyter Notebook---> .ipynb



Getting familier with python environment
interpretation and script writing

Contents
Core/Basic Python
Introduction to languages--- M/C, Middle, High, Translators

Intro to Python
#S/w requirements and installation
- Python
- PyCharm
- Jupyter Notebook - Anaconda , pip
- VS code


advantages
- Simple and easy to learn
- High level lang
- Freeware and open source
- Platform independant
- Dynamically typed
- Interpreted
- Rich in libraries
- Embedded support for other languages

disadvantages
1)  Mobile Developement
2) Backword Compatibility

python 2.x---> python 3.x not executable

Varibles and datatypes
Built in datatypes
-None
- int---> Integer values complete number  1,2,3,-1,-2,999
- float----> Fractional of floating point values 1.1, 0.323432
- String-----> character values "Siddhesh"
- boolean ---> True / False
- Complex -----> 9+34j

a= a%b
a = 40%-35

Data structures and opearations on them
-----> Sequential
List --->  How to find out index of 2nd occarance  element in list
eg1 = [1,1,1,1,1,[11,1,1,1,1,],1,1,1,1,1,11,1,11,1,1,1]
store deleted elements
heterogeneous list and operations

Tuple ---> tuple() 
Set ----> 
Dictionary
String Functions

Types of Operators

IO operations
User input
Formatting String in python
Using---- "".format()
	f'String'

Python is an indented language

Control structures----> if, else if, for, while (do while---> Not supported)
Examples
-translate and maketranslation
-string %
-sum function
-for else
-for on list
-pass keyword

Functions
- Function Basics
- Function Arguments
	- Positional Arguments
	- Default Arguments
	- Keyword Argemunts
	- Variable Length Arguments
	- Variable Length Keyword arguments
- Lambda function
- map() and filter() function
-  concatenate 2 numbers
- * operator
- find the list of length of each string in the given list
- Python progam to reverse the given number
- pp to find the sum of digits in number
- PP to take the list and print the second largest number in the list
- PP to merge two lists and to sort it

- Generators
- Iterators
- Decorators
- Recursion


Advance Python.
Procedure oriented progrannimg---> Basic building block ---> function(), Problem solving by procedure approach, top down approach	

OOPs Concepts:
OOP: if a programming language supports all the object oriented features in order to solve the problems then it is called as object oriented progg lang
	- Everything is considered as an object where every object is having its own data and methods
	- Data and methods are collected using single unit by using class and object
	- It follows top down appraoch
	- it is used to solve the real life problem in easy manner
Classes and Objects
	Class : Class is a blueprint of an object---> if defines the structure of an object ---> class is a collection of data members and member function
	Object : it is an instance of a class
	Constructors

Encapsulation: Mechanism to restrict the variable access
	public, private, protected
	class variables
	instance variables
	Class method
	Static method
	Instance Method
Inheritance
    Single
    Multilevel
    Multiple
    Hierachycal
    Hybrid

Polymorphism
    Function returning multiple values
    Method overloading and method overriding
    Operator overloading
    MRO


Python Modules

Packages

Ecxeption Handling

Files And Directories

Multithreading

OS Modules

Garbage Collection

File Handling

Database in Python







Basic python, advanced
RDBMS
Linux commands

